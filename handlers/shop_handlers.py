from aiogram.types import CallbackQuery
from aiogram.filters import Command, CommandObject
from aiogram import F, types
from aiogram import Router

from my_functions.functions_for_shop import select_swimmer_for_shop, handle_purchase, execute_purchase
from my_functions.my_functions import *

router = Router()

@router.message(Command('shop'))
async def get_web_shop(message: types.Message):
    await message.answer(
        "üè™–º–∞–≥–∞–∑–∏–Ω",
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(
                        text="üåê–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–≤–∞—Ä—ã",
                        url="https://scoobydenis.github.io/swim_shop/"
                    ),
                    types.InlineKeyboardButton(
                        text="üì¶–ù–∞—á–∞—Ç—å –ø–æ–∫—É–ø–∫–∏",
                        callback_data='shops2'
                    )
                ]
            ]
        )
    )

@router.callback_query(F.data.startswith('shops2'))
async def get_season2_shop(callback: CallbackQuery):
    inline_kb = []
    inline_kb.append([InlineKeyboardButton(text="üñºÔ∏è1 —Å—Ç–∏–∫–µ—Ä", callback_data="sticker")])
    inline_kb.append([InlineKeyboardButton(text="üñºÔ∏è1 —Å—Ç–∏–∫–µ—Ä –Ω–∞ –≤—ã–±–æ—Ä", callback_data="open_sticker")])
    inline_kb.append([InlineKeyboardButton(text=" üñºÔ∏èüñºÔ∏èüñºÔ∏è –Ω–∞–±–æ—Ä —Å—Ç–∏–∫–µ—Ä–æ–≤", callback_data="pack_stickers")])
    inline_kb.append([InlineKeyboardButton(text="üê•1 —Å–∫–≤–∏—à", callback_data="squish")])
    inline_kb.append([InlineKeyboardButton(text="üêæ1 —Å–∫–≤–∏—à –Ω–∞ –≤—ã–±–æ—Ä", callback_data="open_squish")])
    inline_kb.append([InlineKeyboardButton(text="üß∏1 –∏–≥—Ä—É—à–∫–∞ –∞–Ω—Ç–∏—Å—Ç—Ä–µ—Å—Å", callback_data="antistress")])
    inline_kb.append([InlineKeyboardButton(text="üß∏1 –∞–Ω—Ç–∏—Å—Ç—Ä–µ—Å—Å –Ω–∞ –≤—ã–±–æ—Äüß∏", callback_data="open_antistress")])
    inline_kb.append([InlineKeyboardButton(text="üí≥—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–∞ Ozon(2000—Ä—É–±)", callback_data="small_sertificate")])
    inline_kb.append([InlineKeyboardButton(text="üí≥—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–∞ Ozon(5000—Ä—É–±)", callback_data="big_sertificate")])
    inline_kb.append([InlineKeyboardButton(text="üì±Iphone16 Pro Max 1tb", callback_data="iphone")])
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=inline_kb
    )
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∞—Ä–æ–∫", reply_markup=keyboard)

@router.callback_query(F.data.startswith('sticker'))
async def buy_sticker(callback: CallbackQuery):
    await select_swimmer_for_shop(callback, 'process_sticker')

@router.callback_query(F.data.startswith('open_sticker'))
async def buy_open_sticker(callback: CallbackQuery):
    await select_swimmer_for_shop(callback, 'open_process_sticker')

@router.callback_query(F.data.startswith('pack_stickers'))
async def buy_pack_sticker(callback: CallbackQuery):
    await select_swimmer_for_shop(callback, 'pack_process_sticker')

@router.callback_query(F.data.startswith('squish'))
async def buy_squish(callback: CallbackQuery):
    await select_swimmer_for_shop(callback, 'process_squish')

@router.callback_query(F.data.startswith('open_squish'))
async def buy_open_squish(callback: CallbackQuery):
    await select_swimmer_for_shop(callback, 'open_process_squish')

@router.callback_query(F.data.startswith('antistress'))
async def buy_antistress(callback: CallbackQuery):
    await select_swimmer_for_shop(callback, 'process_antistress')

@router.callback_query(F.data.startswith('open_antistress'))
async def buy_open_antistress(callback: CallbackQuery):
    await select_swimmer_for_shop(callback, 'open_process_antistress')

@router.callback_query(F.data.startswith('small_sertificate'))
async def buy_small_sertificate(callback: CallbackQuery):
    await select_swimmer_for_shop(callback, 'process_small_sertificate')

@router.callback_query(F.data.startswith('big_sertificate'))
async def buy_big_sertificate(callback: CallbackQuery):
    await select_swimmer_for_shop(callback, 'process_big_sertificate')

@router.callback_query(F.data.startswith('iphone'))
async def buy_iphone(callback: CallbackQuery):
    await select_swimmer_for_shop(callback, 'process_iphone')


@router.callback_query(F.data.startswith('process_sticker_'))
async def process_buy_sticker(callback: CallbackQuery):
    await handle_purchase(callback=callback, prefix='üñºÔ∏è—Å—Ç–∏–∫–µ—Ä', yes_callback_prefix='finish_sticker', price=700)

@router.callback_query(F.data.startswith('open_process_sticker_'))
async def process_buy_open_sticker(callback: CallbackQuery):
    await handle_purchase(callback=callback, prefix='üñºÔ∏è—Å—Ç–∏–∫–µ—Ä –Ω–∞ –≤—ã–±–æ—ÄüñºÔ∏è', yes_callback_prefix='finish_open_sticker', price=800)

@router.callback_query(F.data.startswith('pack_process_sticker_'))
async def process_buy_pack_sticker(callback: CallbackQuery):
    await handle_purchase(callback=callback, prefix='üñºÔ∏èüñºÔ∏èüñºÔ∏è–Ω–∞–±–æ—Ä —Å—Ç–∏–∫–µ—Ä–æ–≤(50—à—Ç)', yes_callback_prefix='finish_pack_sticker', price=10000)

@router.callback_query(F.data.startswith('process_squish_'))
async def process_buy_squish(callback: CallbackQuery):
    await handle_purchase(callback=callback, prefix='üê•—Å–∫–≤–∏—à', yes_callback_prefix='finish_squish', price=2200)

@router.callback_query(F.data.startswith('open_process_squish_'))
async def process_buy_open_squish(callback: CallbackQuery):
    await handle_purchase(callback=callback, prefix='üêæ—Å–∫–≤–∏—à –Ω–∞ –≤—ã–±–æ—Ä', yes_callback_prefix='finish_open_squish', price=2500)

@router.callback_query(F.data.startswith('process_antistress_'))
async def process_buy_antistress(callback: CallbackQuery):
    await handle_purchase(callback=callback, prefix='üß∏–∞–Ω—Ç–∏—Å—Ç—Ä–µ—Å—Å', yes_callback_prefix='finish_antistress', price=4000)

@router.callback_query(F.data.startswith('open_process_antistress_'))
async def process_buy_open_antistress(callback: CallbackQuery):
    await handle_purchase(callback=callback, prefix='üß∏–∞–Ω—Ç–∏—Å—Ç—Ä–µ—Å—Å –Ω–∞ –≤—ã–±–æ—Äüß∏', yes_callback_prefix='finish_open_antistress', price=5000)

@router.callback_query(F.data.startswith('process_small_'))
async def process_buy_small_sertificate(callback: CallbackQuery):
    await handle_purchase(callback=callback, prefix='üí≥—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç(2000—Ä—É–±)', yes_callback_prefix='finish_small', price=30000)

@router.callback_query(F.data.startswith('process_big_'))
async def process_buy_big_sertificate(callback: CallbackQuery):
    await handle_purchase(callback=callback, prefix='üí≥—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç(5000—Ä—É–±)', yes_callback_prefix='finish_big', price=50000)

@router.callback_query(F.data.startswith('process_iphone'))
async def process_buy_big_iphone(callback: CallbackQuery):
    await handle_purchase(callback=callback, prefix='üì±Iphone16 Pro Max 1tb', yes_callback_prefix='finish_iphone', price=150000)


@router.callback_query(F.data.startswith('finish_sticker_'))
async def process_end_buy_sticker(callback: CallbackQuery):
    await callback.message.answer("–ü–æ–∫—É–ø–∫–∏ –≤–æ–∑–º–æ–∂–Ω—ã —Å 19–º–∞—è")
    #await execute_purchase(callback=callback, price=700, present_type="—Å—Ç–∏–∫–µ—Ä", success_message="–î–µ–Ω–∏—Å –ø–µ—Ä–µ–¥–∞—Å—Ç —Å—Ç–∏–∫–µ—Ä –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è")


@router.callback_query(F.data.startswith('finish_open_sticker_'))
async def process_end_buy_open_sticker(callback: CallbackQuery):
    await callback.message.answer("–ü–æ–∫—É–ø–∫–∏ –≤–æ–∑–º–æ–∂–Ω—ã —Å 19–º–∞—è")
    #await execute_purchase(callback=callback, price=800, present_type="—Å—Ç–∏–∫–µ—Ä(–Ω–∞ –≤—ã–±–æ—Ä)",
    #                       success_message="–î–µ–Ω–∏—Å –ø–µ—Ä–µ–¥–∞—Å—Ç —Å—Ç–∏–∫–µ—Ä(–Ω–∞ –≤—ã–±–æ—Ä) –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è")

@router.callback_query(F.data.startswith('finish_pack_sticker_'))
async def process_end_buy_pack_sticker(callback: CallbackQuery):
    await callback.message.answer("–ü–æ–∫—É–ø–∫–∏ –≤–æ–∑–º–æ–∂–Ω—ã —Å 19–º–∞—è")
    #await execute_purchase(callback=callback, price=10000, present_type="–Ω–∞–±–æ—Ä —Å—Ç–∏–∫–µ—Ä–æ–≤",
    #                       success_message="–î–µ–Ω–∏—Å –ø–µ—Ä–µ–¥–∞—Å—Ç –Ω–∞–±–æ—Ä —Å—Ç–∏–∫–µ—Ä–æ–≤ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è")


@router.callback_query(F.data.startswith('finish_squish_'))
async def process_end_buy_squish(callback: CallbackQuery):
    await callback.message.answer("–ü–æ–∫—É–ø–∫–∏ –≤–æ–∑–º–æ–∂–Ω—ã —Å 19–º–∞—è")
    #await execute_purchase(callback=callback, price=2200, present_type="—Å–∫–≤–∏—à",
    #                       success_message="–î–µ–Ω–∏—Å –ø–µ—Ä–µ–¥–∞—Å—Ç —Å–∫–≤–∏—à –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è")



@router.callback_query(F.data.startswith('finish_open_squish_'))
async def process_end_buy_open_squish(callback: CallbackQuery):
    await callback.message.answer("–ü–æ–∫—É–ø–∫–∏ –≤–æ–∑–º–æ–∂–Ω—ã —Å 19–º–∞—è")
    #await execute_purchase(callback=callback, price=2500, present_type="—Å–∫–≤–∏—à(–Ω–∞ –≤—ã–±–æ—Ä)",
    #                       success_message="–î–µ–Ω–∏—Å –ø–µ—Ä–µ–¥–∞—Å—Ç —Å–∫–≤–∏—à(–Ω–∞ –≤—ã–±–æ—Ä) –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è")

@router.callback_query(F.data.startswith('finish_antistress_'))
async def process_end_buy_antistress(callback: CallbackQuery):
    await callback.message.answer("–ü–æ–∫—É–ø–∫–∏ –≤–æ–∑–º–æ–∂–Ω—ã —Å 19–º–∞—è")
    # await execute_purchase(callback=callback, price=4000, present_type="–∞–Ω—Ç–∏—Å—Ç—Ä–µ—Å—Å",
    #                     success_message="–î–µ–Ω–∏—Å –ø–µ—Ä–µ–¥–∞—Å—Ç –∞–Ω—Ç–∏—Å—Ç—Ä–µ—Å—Å –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è")


@router.callback_query(F.data.startswith('finish_open_antistress_'))
async def process_end_buy_open_antistress(callback: CallbackQuery):
    await callback.message.answer("–ü–æ–∫—É–ø–∫–∏ –≤–æ–∑–º–æ–∂–Ω—ã —Å 19–º–∞—è")
    #await execute_purchase(callback=callback, price=5000, present_type="–∞–Ω—Ç–∏—Å—Ç—Ä–µ—Å—Å(–Ω–∞ –≤—ã–±–æ—Ä)",
    #                      success_message="–î–µ–Ω–∏—Å –ø–µ—Ä–µ–¥–∞—Å—Ç –∞–Ω—Ç–∏—Å—Ç—Ä–µ—Å—Å(–Ω–∞ –≤—ã–±–æ—Ä) –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è")

@router.callback_query(F.data.startswith('finish_small_'))
async def process_end_buy_small(callback: CallbackQuery):
    await callback.message.answer("–ü–æ–∫—É–ø–∫–∏ –≤–æ–∑–º–æ–∂–Ω—ã —Å 19–º–∞—è")
    #await execute_purchase(callback=callback, price=30000, present_type="—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç(2000—Ä—É–±)",
    #                      success_message="–î–µ–Ω–∏—Å –ø–µ—Ä–µ–¥–∞—Å—Ç —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç(2000—Ä—É–±) –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è")


@router.callback_query(F.data.startswith('finish_big_'))
async def process_end_buy_open_big(callback: CallbackQuery):
    await callback.message.answer("–ü–æ–∫—É–ø–∫–∏ –≤–æ–∑–º–æ–∂–Ω—ã —Å 19–º–∞—è")
    #await execute_purchase(callback=callback, price=50000, present_type="–∞–Ω—Ç–∏—Å—Ç—Ä–µ—Å—Å(–Ω–∞ –≤—ã–±–æ—Ä)",
    #                   success_message="–î–µ–Ω–∏—Å –ø–µ—Ä–µ–¥–∞—Å—Ç —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç(5000—Ä—É–±) –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è")

@router.callback_query(F.data.startswith('finish_iphone_'))
async def process_end_buy_iphone(callback: CallbackQuery):
    await callback.message.answer("–ü–æ–∫—É–ø–∫–∏ –≤–æ–∑–º–æ–∂–Ω—ã —Å 19–º–∞—è")
    #await execute_purchase(callback=callback, price=150000, present_type="Iphone",
    #                   success_message="–î–µ–Ω–∏—Å –ø–µ—Ä–µ–¥–∞—Å—Ç Iphone –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è")

@router.message(Command("basket"))
async def get_swimmers_presents(message: types.Message):
    try:
        if not await check_id_in_users(message.from_user.id):
            buttons = []
            connect, cursor = connect_db(DB_NAME1)
            cursor.execute(f"SELECT swimmer_name FROM users WHERE user_id = {message.from_user.id}")
            data = cursor.fetchone()[0]
            button_text = f"allpresents_{str(message.from_user.id) + '_' + data}"
            buttons.append([InlineKeyboardButton(text=data, callback_data=button_text)])
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=buttons
            )
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–æ–≤—Ü–∞", reply_markup=keyboard)
        else:
            await select_swimmer(message, 'allpresents_')
    except Exception as e:
       logging.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

@router.callback_query(F.data.startswith('allpresents_'))
async def get_all_presents(callback: CallbackQuery):
    try:
        id = str(callback.data.split('_')[1])
        connect, cursor = connect_db(DB_NAME4)
        cursor.execute("SELECT presents2 FROM leaderboard WHERE user_id = ?", (id,))
        presents = cursor.fetchone()
        if not presents or not presents[0]:
            await callback.message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–∫—É–ø–æ–∫ üõçÔ∏è")
            return
        presents = presents[0]
        items = [item for item in presents.split('_') if item]
        presents_dict = {}
        for item in items:
            presents_dict[item] = presents_dict.get(item, 0) + 1
        if presents_dict:
            formatted_items = [f"‚Ä¢ {key}: {value}" for key, value in presents_dict.items()]
            result_text = "üõçÔ∏è –í–∞—à–∏ –ø–æ–∫—É–ø–∫–∏:\n" + "\n".join(formatted_items)
        else:
            result_text = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è üò¢"

        await callback.message.answer(result_text)
    except Exception as e:
        await callback.message.answer(e)
    finally:
        connect.close()

@router.message(Command("mult_swimcoins"))
async def mult_swimcoins_for_leaders(message: types.Message, command: CommandObject):
    try:
        id = command.args.split()[0]
        mult = command.args.split()[1]
        connect, cursor = connect_db(DB_NAME4)
        cursor.execute('UPDATE leaderboard SET season2 = season2 * ? WHERE user_id = ?', (mult, id,))
        connect.commit()
    except Exception as e:
        logging.error(e)
    finally:
        connect.close()