from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State, default_state
from aiogram.filters import Command, StateFilter
from aiogram import F
from aiogram import Router
from aiogram.types import Message, CallbackQuery, KeyboardButton, ReplyKeyboardRemove
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from my_functions.my_functions import *
from aiogram.types import InlineKeyboardButton

router = Router()

# state machine for fillform
class FSMFillForm(StatesGroup):
    fill_role = State()
    fill_name_parent = State()
    fill_surname_parent = State()
    fill_name_swimmer = State()
    fill_surname_swimmer = State()
    fill_year_swimmer = State()
    fill_day_swimmer = State()
    fill_month_swimmer = State()

# registration new users
@router.message(Command('fillform'), StateFilter(default_state))
async def process_fillform_command(message: Message, state: FSMContext):
    if (not await check_id_in_parents(message.from_user.id) or not await check_id_in_users(message.from_user.id)) and message.from_user.id != ADMIN:
        await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    else:
        builder = InlineKeyboardBuilder()
        builder.add(InlineKeyboardButton(text="üë®‚Äçüçº –†–æ–¥–∏—Ç–µ–ª—å", callback_data="parent"))
        builder.add(InlineKeyboardButton(text="üèä –ü–ª–æ–≤–µ—Ü", callback_data="swimmer"))
        await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–æ–¥–∏—Ç–µ–ª—å –≤—ã –∏–ª–∏ –ø–ª–æ–≤–µ—Ü', reply_markup=builder.as_markup())
        await state.set_state(FSMFillForm.fill_role)

# filter for parent registr
@router.callback_query(F.data == 'parent', StateFilter(FSMFillForm.fill_role))
async def process_role_parent_sent(callback: CallbackQuery, state: FSMContext):
    await state.update_data(role=callback.data)
    await create_new_parent(callback.from_user.id)
    await callback.message.edit_text(text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è')
    await state.set_state(FSMFillForm.fill_name_parent)

# save parent name and ask surname
@router.message(StateFilter(FSMFillForm.fill_name_parent), F.text.isalpha())
async def process_name_parent_sent(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    connect, cursor = connect_db(DB_NAME2)
    cursor.execute(f"UPDATE parents SET parent_name = '{message.text}' WHERE user_id = {message.from_user.id}")
    connect.commit()
    await message.answer(text='–°–ø–∞—Å–∏–±–æ!\n\n–ê —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é')
    await state.set_state(FSMFillForm.fill_surname_parent)

# end registr parent
@router.message(StateFilter(FSMFillForm.fill_surname_parent),  F.text.isalpha())
async def process_surname_parent_sent(message: Message, state: FSMContext):
    await state.update_data(surname=message.text)
    connect, cursor = connect_db(DB_NAME2)
    cursor.execute(f"UPDATE parents SET parent_surname = '{message.text}' WHERE user_id = {message.from_user.id}")
    connect.commit()
    await message.answer("–û—Ç–ª–∏—á–Ω–æ, –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!‚úÖ\n"
                         "–ú–µ–Ω—é —Ç–∞–º‚ÜôÔ∏è")
    await msg_to_admin(f"–†–æ–¥–∏—Ç–µ–ª—å {message.text} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
    await state.clear()

# filter for swimmer registr
@router.callback_query(F.data=='swimmer', StateFilter(FSMFillForm.fill_role))
async def process_role_swimmer_sent(callback: CallbackQuery, state: FSMContext):
    await state.update_data(role=callback.data)
    if callback.from_user.id != ADMIN:
        id = callback.from_user.id
        username = callback.from_user.username
        await create_new_swimmer(id, username)
        await create_new_leaderboard_user(id)
    await callback.message.edit_text(text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è')
    await state.set_state(FSMFillForm.fill_name_swimmer)

# save swimmer name and ask surname
@router.message(StateFilter(FSMFillForm.fill_name_swimmer), F.text.isalpha())
async def process_name_swimmer_sent(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    id = await get_id_from_txt()
    name = message.text
    if message.from_user.id == ADMIN:
        await create_new_swimmer(id, name)
        await create_new_leaderboard_user(id)
        await set_swimmer_name_to_users(name, id)
        await set_swimmer_name_to_results(name, id)
        await set_swimmer_name_to_leaderboard(name, id)
    else:
        if not await check_id_in_users(message.from_user.id):
            connect, cursor = connect_db(DB_NAME2)
            cursor.execute(f"UPDATE parents SET parent_name = '{message.text}' WHERE user_id = {message.from_user.id}")
            connect.commit()
        await set_swimmer_name_to_users(name, message.from_user.id)
        await set_swimmer_name_to_results(name, message.from_user.id)
        await set_swimmer_name_to_leaderboard(name, message.from_user.id)
    await message.answer(text='–°–ø–∞—Å–∏–±–æ!\n\n–ê —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é')
    await state.set_state(FSMFillForm.fill_surname_swimmer)

# save swimmer surname and ask year
@router.message(StateFilter(FSMFillForm.fill_surname_swimmer),  F.text.isalpha())
async def process_surname_swimmer__sent(message: Message, state: FSMContext):
    await state.update_data(surname=message.text)
    surname = message.text
    if message.from_user.id == ADMIN:
        id = await get_id_from_txt()
        await set_swimmer_surname_to_users(surname, id)
        await set_swimmer_surname_to_leaderboard(surname, id)
    else:
        id = message.from_user.id
        if not await check_id_in_users(message.from_user.id):
            connect, cursor = connect_db(DB_NAME2)
            cursor.execute(
                f"UPDATE parents SET parent_surname = '{message.text}' WHERE user_id = {id}")
            connect.commit()
        await set_swimmer_surname_to_users(surname, id)
        await set_swimmer_surname_to_leaderboard(surname, id)
    await message.answer("–ê —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≥–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è(–Ω–∞–ø—Ä–∏–º–µ—Ä, <b>2010</b>)", parse_mode="html")
    await state.set_state(FSMFillForm.fill_year_swimmer)

# save swimmer year and ask month
@router.message(StateFilter(FSMFillForm.fill_year_swimmer),  F.text.isdigit())
async def process_year_swimmer_sent(message: Message, state: FSMContext):
    if 1950 <= int(message.text) <= 2024:
        await state.update_data(year=message.text)
        connect, cursor = connect_db(DB_NAME1)
        if message.from_user.id == ADMIN:
            id = await get_id_from_txt()
            cursor.execute(f"UPDATE users SET year = '{message.text}' WHERE user_id = {id}")
        else:
            cursor.execute(f"UPDATE users SET year = '{message.text}' WHERE user_id = {message.from_user.id}")
        connect.commit()
        buttons = ['–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å', '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å']
        kb = ReplyKeyboardBuilder()
        for month in buttons:
            kb.add(KeyboardButton(text=month))
        kb.adjust(4)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü —Ä–æ–∂–¥–µ–Ω–∏—è", reply_markup=kb.as_markup(resize_keyboard=True))
        await state.set_state(FSMFillForm.fill_month_swimmer)
    else:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è")

# save month and ask swimmer day
@router.message(StateFilter(FSMFillForm.fill_month_swimmer))
async def process_month_swimmer(message: Message, state: FSMContext):
        await state.update_data(month=message.text)
        connect, cursor = connect_db(DB_NAME1)
        if message.from_user.id == ADMIN:
            id = await get_id_from_txt()
            cursor.execute(f"UPDATE users SET month = '{message.text}' WHERE user_id = {id}")
        else:
            cursor.execute(f"UPDATE users SET month = '{message.text}' WHERE user_id = {message.from_user.id}")
        connect.commit()
        kb = ReplyKeyboardBuilder()
        for i in range(1, 32):
            kb.add(KeyboardButton(text=str(i)))
        kb.adjust(5)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è", reply_markup=kb.as_markup())
        await state.set_state(FSMFillForm.fill_day_swimmer)

# end swimmer's registr
@router.message(StateFilter(FSMFillForm.fill_day_swimmer))
async def process_day_swimmer(message: Message, state: FSMContext):
    await state.update_data(day=message.text)
    connect, cursor = connect_db(DB_NAME1)
    if message.from_user.id == ADMIN:
        id = await get_id_from_txt()
        cursor.execute(f"UPDATE users SET day = '{message.text}' WHERE user_id = {id}")
        with open('files/id.txt', 'w') as file:
            file.write(str(id + 1))
    else:
        cursor.execute(f"UPDATE users SET day = '{message.text}' WHERE user_id = {message.from_user.id}")
    connect.commit()
    await message.answer("–û—Ç–ª–∏—á–Ω–æ, –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!‚úÖ\n–ú–µ–Ω—é —Ç–∞–º‚ÜôÔ∏è", reply_markup=ReplyKeyboardRemove())
    await msg_to_admin(f"–ü–ª–æ–≤–µ—Ü {message.from_user.id} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
    await state.clear()

# check correct swimmer name
@router.message(StateFilter(FSMFillForm.fill_name_swimmer))
async def warning_not_name_swimmer(message: Message):
    await message.answer(
        text='–¢–æ, —á—Ç–æ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –∏–º—è\n\n'
             '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è\n\n')

# check correct parent name
@router.message(StateFilter(FSMFillForm.fill_name_parent))
async def warning_not_name_parent(message: Message):
    await message.answer(
        text='–¢–æ, —á—Ç–æ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –∏–º—è\n\n'
             '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è\n\n')

# check correct swimmer surname
@router.message(StateFilter(FSMFillForm.fill_surname_swimmer))
async def warning_not_surname_swimmer(message: Message):
    await message.answer(
        text='–¢–æ, —á—Ç–æ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Ñ–∞–º–∏–ª–∏—é\n\n'
             '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é\n\n')

# check correct parent surname
@router.message(StateFilter(FSMFillForm.fill_surname_parent))
async def warning_not_surname_parent(message: Message):
    await message.answer(
        text='–¢–æ, —á—Ç–æ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Ñ–∞–º–∏–ª–∏—é\n\n'
             '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é\n\n')






